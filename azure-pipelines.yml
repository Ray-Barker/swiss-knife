variables:
  isTestA: $[eq(variables['Build.SourceBranch'], 'refs/heads/test')]

trigger:
  branches:
    include:
    - main

resources:
  repositories:
  - repository: self
    type: git
    ref: main

name: 1.0$(rev:.r)
parameters:
  - name: branch
    type: string
    default: a11y
    

stages:
- stage: Build
  condition: eq(variables.isTestA, 'true')
  jobs:
  - job: Testing
    displayName: Test the checks
    workspace:
      clean: all
    steps:
    - checkout: self
      clean: true
    - task: Bash@3
      displayName: docker login        
      inputs:
        targetType: 'inline'
        script: |            
          echo "Testing checks for $(Build.SourceBranch)"

- stage: DeployEnv
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployEnv
    displayName: Deploy code
    environment:
      name: magento_local
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            displayName: "Pull repo"
            inputs:
              script: |
                cd /home/vagrant/jp/magento-base
                function git_init {
                sudo su magento -c "git checkout $branch && git reset --hard origin/$branch && git pull && git submodule init && git submodule update && cd packages/magento2-jp && git checkout dev/magento-2.4.2-compatibility" 
                }
                if [[ "${{ parameters.branch }}" == "a11y" ]]; then branch="jp/dev-accessibility" git_init; fi
                if [[ "${{ parameters.branch }}" == "jp" ]]; then sbranch="jp/dev" git_init; fi
          - task: CmdLine@2
            displayName: "Create folder"
            inputs:
              script: |
                sudo mkdir -p /var/www/${{ parameters.branch }}-releases/$(Build.BuildNumber)
                sudo cp -r /home/vagrant/jp/magento-base/* /var/www/${{ parameters.branch }}-releases/$(Build.BuildNumber)/
                sudo rm -rf /var/www/${{ parameters.branch }}-releases/$(Build.BuildNumber)/pub/media
                sudo ln -s -f /var/www/media /var/www/${{ parameters.branch }}-releases/$(Build.BuildNumber)/pub/
                sudo ln -s -f /var/www/shared/${{ parameters.branch }}/env.php /var/www/${{ parameters.branch }}-releases/$(Build.BuildNumber)/app/etc/
                sudo chown -R magento:www-data /var/www/${{ parameters.branch }}-$(Build.BuildNumber)
          - task: CmdLine@2
            displayName: "Build static"
            inputs:
              script: |
                cd /var/www/${{ parameters.branch }}-releases/$(Build.BuildNumber)
                sudo su magento -c "composer install --no-interaction"
                sudo su magento -c "php bin/magento setup:di:compile --no-interaction"
                sudo su magento -c "php bin/magento s:st:d en_US ja_JP -s compact -f"
                sudo chown -R magento:www-data .
                sudo su magento -c "find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} +;"
                sudo su magento -c "find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} +;"
          - task: CmdLine@2
            displayName: "Upgrade"
            inputs:
              script: |
                cd /var/www/${{ parameters.branch }}-releases/$(Build.BuildNumber)
                function magento_maintenance_mode {
                local mode=$1
                sudo su magento -c "php bin/magento \"maintenance:${mode}\""
                }
                magento_maintenance_mode enable
                sudo su magento -c "php bin/magento setup:upgrade --no-interaction"
                sudo su magento -c "php bin/magento c:f"
                sudo su magento -c "php bin/magento in:rein"
                sudo rm -rf /var/www/${{ parameters.branch }}
                sudo ln -f -s /var/www/${{ parameters.branch }}-releases/$(Build.BuildNumber) /var/www/${{ parameters.branch }}
                magento_maintenance_mode disable
          - task: CmdLine@2
            displayName: "Cleanup"
            inputs:
              script: |
                cd /var/www/${{ parameters.branch }}-releases/
                keep_releases=1
                releases=$(ls -tr -d */)
                RELEASES=($releases)
                redundant_number=$(( ${#RELEASES[@]} - $keep_releases))
                if (( $redundant_number > 0 )); then
                  for ((i = 0 ; i < redundant_number ; i++)); do
                      sudo rm -rf "${RELEASES[$i]}"
                  done
                fi